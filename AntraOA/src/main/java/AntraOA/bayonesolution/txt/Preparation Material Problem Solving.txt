Question: 

Given a binary tree, print the elements in the anti-clockwise direction.

Ans https://www.tutorialspoint.com/anti-clockwise-spiral-traversal-of-a-binary-tree

Question: 

Given a matrix where every element is either Ã¢â‚¬ËœOÃ¢â‚¬â„¢ or Ã¢â‚¬ËœXÃ¢â‚¬â„¢, replace Ã¢â‚¬ËœOÃ¢â‚¬â„¢ with Ã¢â‚¬ËœXÃ¢â‚¬â„¢ if surrounded by Ã¢â‚¬ËœXÃ¢â‚¬â„¢. A Ã¢â‚¬ËœOÃ¢â‚¬â„¢ (or a set of Ã¢â‚¬ËœOÃ¢â‚¬â„¢) is considered to be by surrounded by Ã¢â‚¬ËœXÃ¢â‚¬â„¢ if there are Ã¢â‚¬ËœXÃ¢â‚¬â„¢ at locations just below, just above, just left and just right of it. 

Examples:

Input: mat[M][N] =  
		     
		            {{'X', 'O', 'X', 'X', 'X', 'X'},
                     {'X', 'O', 'X', 'X', 'O', 'X'},
                     {'X', 'X', 'X', 'O', 'O', 'X'},
                     {'O', 'X', 'X', 'X', 'X', 'X'},
                     {'X', 'X', 'X', 'O', 'X', 'O'},
                     {'O', 'O', 'X', 'O', 'O', 'O'},
                    };
Output: mat[M][N] =  
		      
		             {{'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'X', 'X', 'X'},
                      {'O', 'X', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'O', 'X', 'O'},
                      {'O', 'O', 'X', 'O', 'O', 'O'},
                    };

Ans  https://www.geeksforgeeks.org/given-matrix-o-x-replace-o-x-surrounded-x/

Question:

In a string find the pattern

Ans:

https://www.geeksforgeeks.org/algorithms-gq/pattern-searching/

Question: 

Validating Parenthesis

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:
Input: "()"
Output: true

Example 2:
Input: "()[]{}"
Output: true

Example 3:
Input: "(]"
Output: false

Example 4:
Input: "([)]"
Output: false

Example 5:
Input: "{[]}"
Output: true

Ans:

class Solution {

  // Hash table that takes care of the mappings.
  private HashMap<Character, Character> mappings;

  // Initialize hash map with mappings. This simply makes the code easier to read.
  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {

    // Initialize a stack to be used in the algorithm.
    Stack<Character> stack = new Stack<Character>();

    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);

      // If the current character is a closing bracket.
      if (this.mappings.containsKey(c)) {

        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
        char topElement = stack.empty() ? '#' : stack.pop();

        // If the mapping for this bracket doesn't match the stack's top element, return false.
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        // If it was an opening bracket, push to the stack.
        stack.push(c);
      }
    }

    // If the stack still contains elements, then it is an invalid expression.
    return stack.isEmpty();
  }
}

https://leetcode.com/problems/valid-parentheses/

Question:

Group the anagrams together (Words which are composed of same characters and are of equal length)

["Rat", "Car", "Below", "Tast", "Cried", "Study", "Thing", "Chin", "Grab", "Act", "Robed", "Vase", "Glean", "Desserts", "Tar", "Arc", "Elbow", "State", "Cider"]

Reference Output:

[[Rat, Tar],[Car, Arc],[Below, Elbow]]
    
    List<String> words=new ArrayList<String>();
    
    words.add("Rat");
    words.add("Car");
    words.add("Below");
    words.add("Tast");
    words.add("Cried");
    words.add("Study");
    words.add("Thing");
    words.add("Chin");
    words.add("Grab");
    words.add("Act");
    words.add("Robed");
    words.add("Vase");
    words.add("Glean");
    words.add("Desserts");
    words.add("Tar");
    words.add("Arc");
    words.add("Elbow");
    words.add("State");
    words.add("Cider");
    words.add("Dusty");
    words.add("Night");
    words.add("Inch");
    words.add("Brag");
    words.add("Cat");
    words.add("Bored");
    words.add("Save");
    words.add("Angel");
    words.add("Streseed");

Ans https://www.geeksforgeeks.org/given-a-sequence-of-words-print-all-anagrams-together/

Question: 

Using queue to implement stack and use stack to implement queue

Ans: 

https://www.geeksforgeeks.org/implement-stack-using-queue/

Question: 

Print pair of numbers that sum up to a third number in an array.

Ans: 

https://www.geeksforgeeks.org/given-an-array-a-and-a-number-x-check-for-pair-in-a-with-sum-as-x/

Question: 

Print all the nodes at certain level in an Binary Tree

Ans: 

https://www.geeksforgeeks.org/print-nodes-at-k-distance-from-root/

Question: 

Merge Two  sorted Arrays:

Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8}
Output: arr3[] = {1, 2, 3, 4, 5, 6, 8}

Ans 

https://javaconceptoftheday.com/merge-two-arrays-into-single-sorted-array-without-duplicates-in-java/

Question: 

Find Second Highest Value in array

Ans: 

https://www.javatpoint.com/java-program-to-find-second-largest-number-in-an-array

Question: 

Given an Binary tree find max for every level.

Ans:

https://www.geeksforgeeks.org/largest-value-level-binary-tree/

Question: 

Given an array of integers, return an array of integers which contains

[1st integer, Sum of next 2 integers (2nd, 3rd), Sum of next 3 integers (4th, 5th, 6th)]

Input Array: 

[1,6,8,5,9,4,7,2]

Output Array:

[1,14,18,9]

Solution:

Question: 

Given a string and a character, task is to make a function which count occurrence of the given character in the string

Ans: 

https://www.geeksforgeeks.org/count-occurrence-of-a-given-character-in-a-string-using-stream-api-in-java/

Question: 

Binary tree- display like pyramid:

Ans: 

https://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/

Questions:

https://www.geeksforgeeks.org/add-two-numbers-represented-by-linked-lists/

https://www.geeksforgeeks.org/merge-k-sorted-arrays/

https://www.geeksforgeeks.org/merge-k-sorted-linked-lists/

https://www.geeksforgeeks.org/add-two-numbers-represented-by-linked-lists/

https://www.geeksforgeeks.org/merge-k-sorted-arrays/

https://www.geeksforgeeks.org/merge-k-sorted-linked-lists/

Question:  

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

https://leetcode.com/problems/trapping-rain-water/

Approach 1: Brute force
Intuition

Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.

Algorithm

Initialize ans=0ans=0
Iterate the array from left to right:
Initialize \text{left\_max}=0left_max=0 and \text{right\_max}=0right_max=0
Iterate from the current element to the beginning of array updating:
\text{left\_max}=\max(\text{left\_max},\text{height}[j])left_max=max(left_max,height[j])
Iterate from the current element to the end of array updating:
\text{right\_max}=\max(\text{right\_max},\text{height}[j])right_max=max(right_max,height[j])
Add \min(\text{left\_max},\text{right\_max}) - \text{height}[i]min(left_max,right_max)âˆ’height[i] to \text{ans}ans

Complexity Analysis

Time complexity: O(n^2)O(n 
2
 ). For each element of array, we iterate the left and right parts.

Space complexity: O(1)O(1) extra space.


    }

int trap(vector<int>& height)
{
    int ans = 0, current = 0;
    stack<int> st;
    while (current < height.size()) {
        while (!st.empty() && height[current] > height[st.top()]) {
            int top = st.top();
            st.pop();
            if (st.empty())
                break;
            int distance = current - st.top() - 1;
            int bounded_height = min(height[current], height[st.top()]) - height[top];
            ans += distance * bounded_height;
        }
        st.push(current++);
    }
    return ans;
}

Solution 

class Solution {
    public int trap(int[] height) {
        // time : O(n)
        // space : O(1)
        if (height.length==0) return 0; 
        int left = 0, right = height.length-1; 
        int leftMax=0, rightMax=0; 
        int ans = 0; 
        while (left < right) {
            if (height[left] > leftMax) leftMax = height[left]; 
            if (height[right] > rightMax) rightMax = height[right];
            if (leftMax < rightMax) {
                ans += Math.max(0, leftMax-height[left]); 
                left++; 
            } else {
                ans += Math.max(0, rightMax-height[right]); 
                right--; 
            }
        }
        return ans; 
    }
}


Solution:

class Solution {
    public int trap(int[] height) {
        int result = 0;
        int start = 0;
        int end = height.length - 1;
        while (start < end) {
            if (height[start] <= height[end]) {
                int current = height[start];
                while (height[++start] < current) {
                    result += current - height[start];
                }
            } else {
                int current = height[end];
                while(height[--end] < current) {
                    result += current - height[end];
                }
            }
        }
        return result;
    }
}

Solution:

class Solution {
    public int trap(int[] height) {
        if (height == null || height.length < 3) return 0;
        int ans = 0;
        // one pass: scan throguh array from left to right and track the maximum height at each index
        int[] dp = new int[height.length];
        dp[0] = height[0];
        for (int i = 1; i < height.length; i++) {
            dp[i] = Math.max(dp[i - 1], height[i]);
        }

        int maxHeightFromRight = height[height.length - 1];
        // second pass: scan through array from right to left to calculate the volume of water
        // at each puddle and also keep track of maximum height from right side
        for (int i = height.length - 2; i > 0; i--) {
            // NOTE: don't forget Math.max(volume, 0) because it is possible to get negative on volume
            ans += Math.max(Math.min(maxHeightFromRight, dp[i - 1]) - height[i], 0);
            maxHeightFromRight = Math.max(maxHeightFromRight, height[i]);
        }
        return ans;
    }
}